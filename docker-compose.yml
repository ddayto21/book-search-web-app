# docker-compose.yml

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.frontend
      target: dev
    volumes:
      - ./frontend:/app
      - /app/node_modules # Prevent conflicts with the node_modules directory in the container
    ports:
      - "3000:3000"
    environment:
      - CHOKIDAR_USEPOLLING=true # Resolve file watching issues in certain environments
    dependes_on:
      - api
  # ---------------------------------------------------------------------------
  # API Service
  # This service builds and runs the FastAPI application.
  # It depends on the Redis service to ensure that caching/session storage is available.
  # Environment variables configure the connection to Redis, with sensitive data injected via AWS Secrets Manager.
  # The API is bound to localhost (127.0.0.1) to restrict external access.
  # ---------------------------------------------------------------------------
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile.backend

    depends_on:
      - redis # Ensure Redis is started before the API.

    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD} # Injected via AWS Secrets Manager

    ports:
      - "127.0.0.1:8000:8000" # Bind the API service to localhost on port 8000.

  # ---------------------------------------------------------------------------
  # Redis Service
  # This service uses the lightweight 'redis:alpine' image for caching/session management.
  # A custom Redis configuration is mounted from the host.
  # Persistent data is stored in a named volume (redis_data).
  # The service is bound to localhost and includes a health check to ensure availability.
  # ---------------------------------------------------------------------------
  redis:
    image: "redis:alpine"

    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf # Mount the Redis config file
      - redis_data:/data # Persistent storage
    ports:
      - "127.0.0.1:6379:6379"

    restart: always

    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      retries: 5
      timeout: 5s

    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]

# ---------------------------------------------------------------------------
# Named Volumes
# Define volumes to persist data across container restarts.
# ---------------------------------------------------------------------------
volumes:
  redis_data:


