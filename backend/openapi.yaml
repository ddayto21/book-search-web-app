openapi: 3.0.3
info:
  title: Chat API for LexiGPT 
  version: 1.0.0
  description: >
    This API provides a streaming chat endpoint (/chat) that accepts a stateful chat payload from the React client (using the useChat hook). The backend forwards the request to the LLM provider (deepseek-chat model) and streams back partial responses as Server-Sent Events (SSE). Clients must parse these events to update the chat UI.
  license:
    name: Apache 2.0
    url: https://opensource.org/licenses/Apache-2.0

servers:
  - url: http://localhost:8000
    description: Local server
security:
  - apiKeyAuth: []

components:
  securitySchemes:
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

paths:
  /chat:
    post:
      summary: Initiate chat with LLM provider
      description: >
        Receives a stateful chat payload containing a list of messages and forwards the request to the LLM provider (deepseek-chat) to generate a response.

      operationId: chatStream
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChatRequest"
            example:
              threadId: "abc123"
              model: "deepseek-chat"
              temperature: 1.0
              max_tokens: 1000
              response_format: "json"
              stream: true
              messages:
                - id: "1"
                  role: "assistant"
                  content: "Hello! How can I help you today?"
                  timestamp: "2025-02-19T12:00:00Z"
                - id: "2"
                  role: "user"
                  content: "I'm looking for book recommendations."
                  timestamp: "2025-02-19T12:00:05Z"
      responses:
        "200":
          description: >
            Successful response streaming partial message content as SSE.
            Each event contains a JSON object with incremental chat data.
          content:
            text/event-stream:
              schema:
                type: string
                description: >
                  Stream of SSE events. Example:
                  data: {"content": "partial message content"}\n\n
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
components:
  schemas:
    ChatMessage:
      type: object
      title: ChatMessage
      description: Represents a single message in the conversation.
      properties:
        id:
          type: string
          description: Unique identifier for the message.
        role:
          type: string
          description: The role of the message sender.
          enum: [user, assistant, system]
        content:
          type: string
          description: The content of the message.
        timestamp:
          type: string
          format: date-time
          description: Timestamp when the message was created.
      required:
        - id
        - role
        - content
    ChatRequest:
      type: object
      title: ChatRequest
      description: Payload for initiating a chat conversation.
      properties:
        threadId:
          type: string
          description: Optional thread identifier. If not provided, a new thread is created.
        model:
          type: string
          description: Identifier of the LLM to use.
          default: "deepseek-chat"
        temperature:
          type: number
          description: Controls the randomness of the generated response.
          default: 1.0
        max_tokens:
          type: integer
          description: Maximum number of tokens to generate.
          default: 1000
        response_format:
          type: string
          description: Format of the response (e.g., "json").
          default: "json"
        stream:
          type: boolean
          description: Whether to stream partial responses via SSE.
          default: true
        messages:
          type: array
          description: The full conversation history (stateful payload).
          items:
            $ref: "#/components/schemas/ChatMessage"
      required:
        - messages
    HTTPValidationError:
      type: object
      title: HTTPValidationError
      properties:
        detail:
          type: array
          items:
            $ref: "#/components/schemas/ValidationError"
    ValidationError:
      type: object
      title: ValidationError
      properties:
        loc:
          type: array
          items:
            anyOf:
              - type: string
              - type: integer
        msg:
          type: string
        type:
          type: string
      required:
        - loc
        - msg
        - type
