openapi: 3.0.3
info:
  title: Book Search API
  version: "1.0.0"
  description: >
    A service for natural language book search. Integrates with an LLM to process
    and refine user queries as well as the fetched book data, and uses OpenLibrary
    based on the LLM-refined query. Designed for low latency (1-3 seconds max).

paths:
  /search-books:
    post:
      summary: Search for books using a natural language query
      description: >
        Accepts a natural language query, processes it using an LLM, queries
        OpenLibrary, then returns recommendations or an error. May also return a
        moderation message if profanity is detected in the query.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchBooksRequest'
      responses:
        "200":
          description: Successfully retrieved book recommendations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchBooksResponse'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Forbidden - profanity or other moderated content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error (OpenLibrary/LLM failures or other)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    SearchBooksRequest:
      type: object
      properties:
        query:
          type: string
      required:
        - query

    SearchBooksResponse:
      type: object
      properties:
        recommendations:
          type: array
          items:
            $ref: '#/components/schemas/Book'
        message:
          type: string
          description: Optional moderation message if profanity was detected

    Book:
      type: object
      properties:
        title:
          type: string
        authors:
          type: array
          items:
            type: string
        description:
          type: string
      required:
        - title
        - authors
        - description

    Error:
      type: object
      properties:
        code:
          oneOf:
            - type: string
            - type: integer
        message:
          type: string
      required:
        - code
        - message